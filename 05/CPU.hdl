// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //// Replace this comment with your code.
    
    Mux16(a=instruction, b=aluOutRegA, sel=instruction[15], out=regAIn);
    Or(a=j, b=instruction[5], out=loadA);
    Not(in=instruction[15], out=j);
    Register(in=regAIn, load=loadA, out[0..14]=addressM, out=regAOutPCIn, out=regAOutAluIn);
    Mux16(a=regAOutAluIn, b=inM, sel=instruction[12], out=aluIn);

    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOutRegD, load=loadD, out=registerDOut);
    ALU(x=registerDOut, y=aluIn,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOutRegA, out=aluOutRegD, zr=zr, ng=ng, out=outM);

    PC(in=regAOutPCIn, inc=incPC, load=loadPC, reset=reset, out[0..14]=pc);
    
    And(a=instruction[15], b=instruction[3], out=writeM);

    Not(in=zr, out=JNE);
    Not(in=ng, out=JGE);
    Or(a=zr, b=ng, out=JLE);
    Or(a=false, b=ng, out=JLT);
    Or(a=false, b=zr, out=JEQ);
    And(a=JGE, b=JNE, out=JGT);
    Not(in=false, out=JMP);
    Not(in=true, out=null);

    Mux8Way16(sel=instruction[0..2],
    a[0]=null,
    b[0]=JGT,
    c[0]=JEQ,
    d[0]=JGE,
    e[0]=JLT,
    f[0]=JNE,
    g[0]=JLE,
    h[0]=JMP,
    out[0]=JMPPC
    );

    And(a=instruction[15], b=JMPPC, out=loadPC);
    Not(in=loadPC, out=incPC);



    


}
